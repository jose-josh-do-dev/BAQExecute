//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BAQExecute_WCF.DynamicQueryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset))]
    public partial class IceTableset : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryExecutionTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryExecutionTableset : BAQExecute_WCF.DynamicQueryService.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionFilterTable ExecutionFilterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionParameterTable ExecutionParameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionSettingTable ExecutionSettingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionValueSetItemsTable ExecutionValueSetItemsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionFilterTable ExecutionFilter {
            get {
                return this.ExecutionFilterField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutionFilterField, value) != true)) {
                    this.ExecutionFilterField = value;
                    this.RaisePropertyChanged("ExecutionFilter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionParameterTable ExecutionParameter {
            get {
                return this.ExecutionParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutionParameterField, value) != true)) {
                    this.ExecutionParameterField = value;
                    this.RaisePropertyChanged("ExecutionParameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionSettingTable ExecutionSetting {
            get {
                return this.ExecutionSettingField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutionSettingField, value) != true)) {
                    this.ExecutionSettingField = value;
                    this.RaisePropertyChanged("ExecutionSetting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionValueSetItemsTable ExecutionValueSetItems {
            get {
                return this.ExecutionValueSetItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExecutionValueSetItemsField, value) != true)) {
                    this.ExecutionValueSetItemsField = value;
                    this.RaisePropertyChanged("ExecutionValueSetItems");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicQueryListTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class DynamicQueryListTableset : BAQExecute_WCF.DynamicQueryService.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.DynamicQueryListTable DynamicQueryListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryListTable DynamicQueryList {
            get {
                return this.DynamicQueryListField;
            }
            set {
                if ((object.ReferenceEquals(this.DynamicQueryListField, value) != true)) {
                    this.DynamicQueryListField = value;
                    this.RaisePropertyChanged("DynamicQueryList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicQueryTableset", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class DynamicQueryTableset : BAQExecute_WCF.DynamicQueryService.IceTableset {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.DynamicQueryTable DynamicQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryCtrlTable QueryCtrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryCtrlValuesTable QueryCtrlValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryCustomActionTable QueryCustomActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryExecuteSettingTable QueryExecuteSettingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryFieldTable QueryFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryFieldAttributeTable QueryFieldAttributeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryFunctionCallTable QueryFunctionCallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryGroupByTable QueryGroupByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryParameterTable QueryParameterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryRelationTable QueryRelationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryRelationFieldTable QueryRelationField1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QuerySortByTable QuerySortByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QuerySubQueryTable QuerySubQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryTableTable QueryTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryUpdateFieldTable QueryUpdateFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryUpdateSettingsTable QueryUpdateSettingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryValueSetItemsTable QueryValueSetItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryWhereItemTable QueryWhereItemField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTable DynamicQuery {
            get {
                return this.DynamicQueryField;
            }
            set {
                if ((object.ReferenceEquals(this.DynamicQueryField, value) != true)) {
                    this.DynamicQueryField = value;
                    this.RaisePropertyChanged("DynamicQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryCtrlTable QueryCtrl {
            get {
                return this.QueryCtrlField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryCtrlField, value) != true)) {
                    this.QueryCtrlField = value;
                    this.RaisePropertyChanged("QueryCtrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryCtrlValuesTable QueryCtrlValues {
            get {
                return this.QueryCtrlValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryCtrlValuesField, value) != true)) {
                    this.QueryCtrlValuesField = value;
                    this.RaisePropertyChanged("QueryCtrlValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryCustomActionTable QueryCustomAction {
            get {
                return this.QueryCustomActionField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryCustomActionField, value) != true)) {
                    this.QueryCustomActionField = value;
                    this.RaisePropertyChanged("QueryCustomAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryExecuteSettingTable QueryExecuteSetting {
            get {
                return this.QueryExecuteSettingField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryExecuteSettingField, value) != true)) {
                    this.QueryExecuteSettingField = value;
                    this.RaisePropertyChanged("QueryExecuteSetting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryFieldTable QueryField {
            get {
                return this.QueryFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryFieldField, value) != true)) {
                    this.QueryFieldField = value;
                    this.RaisePropertyChanged("QueryField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryFieldAttributeTable QueryFieldAttribute {
            get {
                return this.QueryFieldAttributeField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryFieldAttributeField, value) != true)) {
                    this.QueryFieldAttributeField = value;
                    this.RaisePropertyChanged("QueryFieldAttribute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryFunctionCallTable QueryFunctionCall {
            get {
                return this.QueryFunctionCallField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryFunctionCallField, value) != true)) {
                    this.QueryFunctionCallField = value;
                    this.RaisePropertyChanged("QueryFunctionCall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryGroupByTable QueryGroupBy {
            get {
                return this.QueryGroupByField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryGroupByField, value) != true)) {
                    this.QueryGroupByField = value;
                    this.RaisePropertyChanged("QueryGroupBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryParameterTable QueryParameter {
            get {
                return this.QueryParameterField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryParameterField, value) != true)) {
                    this.QueryParameterField = value;
                    this.RaisePropertyChanged("QueryParameter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryRelationTable QueryRelation {
            get {
                return this.QueryRelationField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryRelationField, value) != true)) {
                    this.QueryRelationField = value;
                    this.RaisePropertyChanged("QueryRelation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="QueryRelationField")]
        public BAQExecute_WCF.DynamicQueryService.QueryRelationFieldTable QueryRelationField1 {
            get {
                return this.QueryRelationField1Field;
            }
            set {
                if ((object.ReferenceEquals(this.QueryRelationField1Field, value) != true)) {
                    this.QueryRelationField1Field = value;
                    this.RaisePropertyChanged("QueryRelationField1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QuerySortByTable QuerySortBy {
            get {
                return this.QuerySortByField;
            }
            set {
                if ((object.ReferenceEquals(this.QuerySortByField, value) != true)) {
                    this.QuerySortByField = value;
                    this.RaisePropertyChanged("QuerySortBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QuerySubQueryTable QuerySubQuery {
            get {
                return this.QuerySubQueryField;
            }
            set {
                if ((object.ReferenceEquals(this.QuerySubQueryField, value) != true)) {
                    this.QuerySubQueryField = value;
                    this.RaisePropertyChanged("QuerySubQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryTableTable QueryTable {
            get {
                return this.QueryTableField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryTableField, value) != true)) {
                    this.QueryTableField = value;
                    this.RaisePropertyChanged("QueryTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryUpdateFieldTable QueryUpdateField {
            get {
                return this.QueryUpdateFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryUpdateFieldField, value) != true)) {
                    this.QueryUpdateFieldField = value;
                    this.RaisePropertyChanged("QueryUpdateField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryUpdateSettingsTable QueryUpdateSettings {
            get {
                return this.QueryUpdateSettingsField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryUpdateSettingsField, value) != true)) {
                    this.QueryUpdateSettingsField = value;
                    this.RaisePropertyChanged("QueryUpdateSettings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryValueSetItemsTable QueryValueSetItems {
            get {
                return this.QueryValueSetItemsField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryValueSetItemsField, value) != true)) {
                    this.QueryValueSetItemsField = value;
                    this.RaisePropertyChanged("QueryValueSetItems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryWhereItemTable QueryWhereItem {
            get {
                return this.QueryWhereItemField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryWhereItemField, value) != true)) {
                    this.QueryWhereItemField = value;
                    this.RaisePropertyChanged("QueryWhereItem");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="DynamicQueryTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="DynamicQueryRow")]
    [System.SerializableAttribute()]
    public class DynamicQueryTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.DynamicQueryRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryCtrlTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryCtrlRow")]
    [System.SerializableAttribute()]
    public class QueryCtrlTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryCtrlRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryCtrlValuesTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryCtrlValuesRow")]
    [System.SerializableAttribute()]
    public class QueryCtrlValuesTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryCtrlValuesRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryCustomActionTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryCustomActionRow")]
    [System.SerializableAttribute()]
    public class QueryCustomActionTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryCustomActionRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryExecuteSettingTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryExecuteSettingRow")]
    [System.SerializableAttribute()]
    public class QueryExecuteSettingTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryExecuteSettingRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryFieldTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryFieldRow")]
    [System.SerializableAttribute()]
    public class QueryFieldTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryFieldRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryFieldAttributeTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryFieldAttributeRow")]
    [System.SerializableAttribute()]
    public class QueryFieldAttributeTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryFieldAttributeRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryFunctionCallTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryFunctionCallRow")]
    [System.SerializableAttribute()]
    public class QueryFunctionCallTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryFunctionCallRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryGroupByTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryGroupByRow")]
    [System.SerializableAttribute()]
    public class QueryGroupByTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryGroupByRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryParameterTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryParameterRow")]
    [System.SerializableAttribute()]
    public class QueryParameterTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryParameterRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryRelationTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryRelationRow")]
    [System.SerializableAttribute()]
    public class QueryRelationTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryRelationRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryRelationFieldTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryRelationFieldRow")]
    [System.SerializableAttribute()]
    public class QueryRelationFieldTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryRelationFieldRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QuerySortByTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QuerySortByRow")]
    [System.SerializableAttribute()]
    public class QuerySortByTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QuerySortByRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QuerySubQueryTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QuerySubQueryRow")]
    [System.SerializableAttribute()]
    public class QuerySubQueryTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QuerySubQueryRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryTableTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryTableRow")]
    [System.SerializableAttribute()]
    public class QueryTableTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryTableRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryUpdateFieldTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryUpdateFieldRow")]
    [System.SerializableAttribute()]
    public class QueryUpdateFieldTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryUpdateFieldRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryUpdateSettingsTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryUpdateSettingsRow")]
    [System.SerializableAttribute()]
    public class QueryUpdateSettingsTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryUpdateSettingsRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryValueSetItemsTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryValueSetItemsRow")]
    [System.SerializableAttribute()]
    public class QueryValueSetItemsTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryValueSetItemsRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="QueryWhereItemTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="QueryWhereItemRow")]
    [System.SerializableAttribute()]
    public class QueryWhereItemTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.QueryWhereItemRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExecutionFilterTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="ExecutionFilterRow")]
    [System.SerializableAttribute()]
    public class ExecutionFilterTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.ExecutionFilterRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExecutionParameterTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="ExecutionParameterRow")]
    [System.SerializableAttribute()]
    public class ExecutionParameterTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.ExecutionParameterRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExecutionSettingTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="ExecutionSettingRow")]
    [System.SerializableAttribute()]
    public class ExecutionSettingTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.ExecutionSettingRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ExecutionValueSetItemsTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="ExecutionValueSetItemsRow")]
    [System.SerializableAttribute()]
    public class ExecutionValueSetItemsTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.ExecutionValueSetItemsRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionFilterRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class ExecutionFilterRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionFilterRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompOpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataTableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NegField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionFilterRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompOp {
            get {
                return this.CompOpField;
            }
            set {
                if ((object.ReferenceEquals(this.CompOpField, value) != true)) {
                    this.CompOpField = value;
                    this.RaisePropertyChanged("CompOp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataTableID {
            get {
                return this.DataTableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTableIDField, value) != true)) {
                    this.DataTableIDField = value;
                    this.RaisePropertyChanged("DataTableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Neg {
            get {
                return this.NegField;
            }
            set {
                if ((this.NegField.Equals(value) != true)) {
                    this.NegField = value;
                    this.RaisePropertyChanged("Neg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RValue {
            get {
                return this.RValueField;
            }
            set {
                if ((object.ReferenceEquals(this.RValueField, value) != true)) {
                    this.RValueField = value;
                    this.RaisePropertyChanged("RValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TempRowBase", Namespace="http://schemas.datacontract.org/2004/07/Epicor.Data")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.IceRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.DynamicQueryRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryCtrlRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryCtrlValuesRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryCustomActionRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryExecuteSettingRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryFieldRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryFieldAttributeRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryFunctionCallRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryGroupByRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryParameterRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryRelationRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryRelationFieldRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QuerySortByRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QuerySubQueryRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryTableRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryUpdateFieldRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryUpdateSettingsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryValueSetItemsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryWhereItemRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionParameterRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionSettingRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionValueSetItemsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.DynamicQueryListRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionFilterRow))]
    public partial class TempRowBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IceRow", Namespace="http://schemas.datacontract.org/2004/07/Ice")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.DynamicQueryRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryCtrlRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryCtrlValuesRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryCustomActionRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryExecuteSettingRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryFieldRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryFieldAttributeRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryFunctionCallRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryGroupByRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryParameterRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryRelationRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryRelationFieldRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QuerySortByRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QuerySubQueryRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryTableRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryUpdateFieldRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryUpdateSettingsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryValueSetItemsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.QueryWhereItemRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionParameterRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionSettingRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionValueSetItemsRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.DynamicQueryListRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAQExecute_WCF.DynamicQueryService.ExecutionFilterRow))]
    public partial class IceRow : BAQExecute_WCF.DynamicQueryService.TempRowBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RowModField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SpecifiedPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SysRowIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.UserDefinedColumns UserDefinedColumnsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowMod {
            get {
                return this.RowModField;
            }
            set {
                if ((object.ReferenceEquals(this.RowModField, value) != true)) {
                    this.RowModField = value;
                    this.RaisePropertyChanged("RowMod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SpecifiedProperties {
            get {
                return this.SpecifiedPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecifiedPropertiesField, value) != true)) {
                    this.SpecifiedPropertiesField = value;
                    this.RaisePropertyChanged("SpecifiedProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SysRowID {
            get {
                return this.SysRowIDField;
            }
            set {
                if ((this.SysRowIDField.Equals(value) != true)) {
                    this.SysRowIDField = value;
                    this.RaisePropertyChanged("SysRowID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.UserDefinedColumns UserDefinedColumns {
            get {
                return this.UserDefinedColumnsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserDefinedColumnsField, value) != true)) {
                    this.UserDefinedColumnsField = value;
                    this.RaisePropertyChanged("UserDefinedColumns");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicQueryRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class DynamicQueryRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllCompaniesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CGCCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.DynamicQueryRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayPhraseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtDatasourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExtQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GlbCompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSharedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UpdatableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool XCompanyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllCompanies {
            get {
                return this.AllCompaniesField;
            }
            set {
                if ((this.AllCompaniesField.Equals(value) != true)) {
                    this.AllCompaniesField = value;
                    this.RaisePropertyChanged("AllCompanies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorID {
            get {
                return this.AuthorIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorIDField, value) != true)) {
                    this.AuthorIDField = value;
                    this.RaisePropertyChanged("AuthorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CGCCode {
            get {
                return this.CGCCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CGCCodeField, value) != true)) {
                    this.CGCCodeField = value;
                    this.RaisePropertyChanged("CGCCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayPhrase {
            get {
                return this.DisplayPhraseField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayPhraseField, value) != true)) {
                    this.DisplayPhraseField = value;
                    this.RaisePropertyChanged("DisplayPhrase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExtDatasourceName {
            get {
                return this.ExtDatasourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtDatasourceNameField, value) != true)) {
                    this.ExtDatasourceNameField = value;
                    this.RaisePropertyChanged("ExtDatasourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExtQuery {
            get {
                return this.ExtQueryField;
            }
            set {
                if ((this.ExtQueryField.Equals(value) != true)) {
                    this.ExtQueryField = value;
                    this.RaisePropertyChanged("ExtQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GlbCompany {
            get {
                return this.GlbCompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.GlbCompanyField, value) != true)) {
                    this.GlbCompanyField = value;
                    this.RaisePropertyChanged("GlbCompany");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsShared {
            get {
                return this.IsSharedField;
            }
            set {
                if ((this.IsSharedField.Equals(value) != true)) {
                    this.IsSharedField = value;
                    this.RaisePropertyChanged("IsShared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Updatable {
            get {
                return this.UpdatableField;
            }
            set {
                if ((this.UpdatableField.Equals(value) != true)) {
                    this.UpdatableField = value;
                    this.RaisePropertyChanged("Updatable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool XCompany {
            get {
                return this.XCompanyField;
            }
            set {
                if ((this.XCompanyField.Equals(value) != true)) {
                    this.XCompanyField = value;
                    this.RaisePropertyChanged("XCompany");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryCtrlRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryCtrlRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryCtrlRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControlIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControlTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayColumnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsMandatoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueColumnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryCtrlRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ControlID {
            get {
                return this.ControlIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlIDField, value) != true)) {
                    this.ControlIDField = value;
                    this.RaisePropertyChanged("ControlID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ControlType {
            get {
                return this.ControlTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlTypeField, value) != true)) {
                    this.ControlTypeField = value;
                    this.RaisePropertyChanged("ControlType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataSource {
            get {
                return this.DataSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSourceField, value) != true)) {
                    this.DataSourceField = value;
                    this.RaisePropertyChanged("DataSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeField, value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayColumn {
            get {
                return this.DisplayColumnField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayColumnField, value) != true)) {
                    this.DisplayColumnField = value;
                    this.RaisePropertyChanged("DisplayColumn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldFormat {
            get {
                return this.FieldFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldFormatField, value) != true)) {
                    this.FieldFormatField = value;
                    this.RaisePropertyChanged("FieldFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMandatory {
            get {
                return this.IsMandatoryField;
            }
            set {
                if ((this.IsMandatoryField.Equals(value) != true)) {
                    this.IsMandatoryField = value;
                    this.RaisePropertyChanged("IsMandatory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ListSource {
            get {
                return this.ListSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.ListSourceField, value) != true)) {
                    this.ListSourceField = value;
                    this.RaisePropertyChanged("ListSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceType {
            get {
                return this.SourceTypeField;
            }
            set {
                if ((this.SourceTypeField.Equals(value) != true)) {
                    this.SourceTypeField = value;
                    this.RaisePropertyChanged("SourceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueColumn {
            get {
                return this.ValueColumnField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueColumnField, value) != true)) {
                    this.ValueColumnField = value;
                    this.RaisePropertyChanged("ValueColumn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryCtrlValuesRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryCtrlValuesRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryCtrlValuesRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ControlIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryCtrlValuesRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ControlID {
            get {
                return this.ControlIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlIDField, value) != true)) {
                    this.ControlIDField = value;
                    this.RaisePropertyChanged("ControlID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Val {
            get {
                return this.ValField;
            }
            set {
                if ((object.ReferenceEquals(this.ValField, value) != true)) {
                    this.ValField = value;
                    this.RaisePropertyChanged("Val");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryCustomActionRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryCustomActionRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryCustomActionRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionID {
            get {
                return this.ActionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionIDField, value) != true)) {
                    this.ActionIDField = value;
                    this.RaisePropertyChanged("ActionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActionLabel {
            get {
                return this.ActionLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionLabelField, value) != true)) {
                    this.ActionLabelField = value;
                    this.RaisePropertyChanged("ActionLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryCustomActionRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryExecuteSettingRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryExecuteSettingRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryExecuteSettingRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettingIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettingValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryExecuteSettingRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettingID {
            get {
                return this.SettingIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingIDField, value) != true)) {
                    this.SettingIDField = value;
                    this.RaisePropertyChanged("SettingID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettingValue {
            get {
                return this.SettingValueField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingValueField, value) != true)) {
                    this.SettingValueField = value;
                    this.RaisePropertyChanged("SettingValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryFieldRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryFieldRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AggregationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AliasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryFieldRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DBFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DBSchemaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DBTableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DropDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FormulaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCalculatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGroupByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LikeDataFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LikeDataFieldSeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LikeDataFieldTableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuickSearchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RaiseEventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdInitExpressionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UpdatableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseLikeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Aggregation {
            get {
                return this.AggregationField;
            }
            set {
                if ((object.ReferenceEquals(this.AggregationField, value) != true)) {
                    this.AggregationField = value;
                    this.RaisePropertyChanged("Aggregation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryFieldRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DBFieldName {
            get {
                return this.DBFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DBFieldNameField, value) != true)) {
                    this.DBFieldNameField = value;
                    this.RaisePropertyChanged("DBFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DBSchemaName {
            get {
                return this.DBSchemaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DBSchemaNameField, value) != true)) {
                    this.DBSchemaNameField = value;
                    this.RaisePropertyChanged("DBSchemaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DBTableName {
            get {
                return this.DBTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DBTableNameField, value) != true)) {
                    this.DBTableNameField = value;
                    this.RaisePropertyChanged("DBTableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeField, value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DropDown {
            get {
                return this.DropDownField;
            }
            set {
                if ((this.DropDownField.Equals(value) != true)) {
                    this.DropDownField = value;
                    this.RaisePropertyChanged("DropDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool External {
            get {
                return this.ExternalField;
            }
            set {
                if ((this.ExternalField.Equals(value) != true)) {
                    this.ExternalField = value;
                    this.RaisePropertyChanged("External");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldFormat {
            get {
                return this.FieldFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldFormatField, value) != true)) {
                    this.FieldFormatField = value;
                    this.RaisePropertyChanged("FieldFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldLabel {
            get {
                return this.FieldLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldLabelField, value) != true)) {
                    this.FieldLabelField = value;
                    this.RaisePropertyChanged("FieldLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Formula {
            get {
                return this.FormulaField;
            }
            set {
                if ((object.ReferenceEquals(this.FormulaField, value) != true)) {
                    this.FormulaField = value;
                    this.RaisePropertyChanged("Formula");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCalculated {
            get {
                return this.IsCalculatedField;
            }
            set {
                if ((this.IsCalculatedField.Equals(value) != true)) {
                    this.IsCalculatedField = value;
                    this.RaisePropertyChanged("IsCalculated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGroupBy {
            get {
                return this.IsGroupByField;
            }
            set {
                if ((this.IsGroupByField.Equals(value) != true)) {
                    this.IsGroupByField = value;
                    this.RaisePropertyChanged("IsGroupBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LikeDataFieldName {
            get {
                return this.LikeDataFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LikeDataFieldNameField, value) != true)) {
                    this.LikeDataFieldNameField = value;
                    this.RaisePropertyChanged("LikeDataFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LikeDataFieldSeq {
            get {
                return this.LikeDataFieldSeqField;
            }
            set {
                if ((this.LikeDataFieldSeqField.Equals(value) != true)) {
                    this.LikeDataFieldSeqField = value;
                    this.RaisePropertyChanged("LikeDataFieldSeq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LikeDataFieldTableID {
            get {
                return this.LikeDataFieldTableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LikeDataFieldTableIDField, value) != true)) {
                    this.LikeDataFieldTableIDField = value;
                    this.RaisePropertyChanged("LikeDataFieldTableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuickSearchID {
            get {
                return this.QuickSearchIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QuickSearchIDField, value) != true)) {
                    this.QuickSearchIDField = value;
                    this.RaisePropertyChanged("QuickSearchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RaiseEvent {
            get {
                return this.RaiseEventField;
            }
            set {
                if ((this.RaiseEventField.Equals(value) != true)) {
                    this.RaiseEventField = value;
                    this.RaisePropertyChanged("RaiseEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableID {
            get {
                return this.TableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TableIDField, value) != true)) {
                    this.TableIDField = value;
                    this.RaisePropertyChanged("TableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdInitExpression {
            get {
                return this.UpdInitExpressionField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdInitExpressionField, value) != true)) {
                    this.UpdInitExpressionField = value;
                    this.RaisePropertyChanged("UpdInitExpression");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Updatable {
            get {
                return this.UpdatableField;
            }
            set {
                if ((this.UpdatableField.Equals(value) != true)) {
                    this.UpdatableField = value;
                    this.RaisePropertyChanged("Updatable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseLike {
            get {
                return this.UseLikeField;
            }
            set {
                if ((this.UseLikeField.Equals(value) != true)) {
                    this.UseLikeField = value;
                    this.RaisePropertyChanged("UseLike");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryFieldAttributeRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryFieldAttributeRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryFieldAttributeRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOverridenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributeName {
            get {
                return this.AttributeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeNameField, value) != true)) {
                    this.AttributeNameField = value;
                    this.RaisePropertyChanged("AttributeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryFieldAttributeRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOverriden {
            get {
                return this.IsOverridenField;
            }
            set {
                if ((this.IsOverridenField.Equals(value) != true)) {
                    this.IsOverridenField = value;
                    this.RaisePropertyChanged("IsOverriden");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableID {
            get {
                return this.TableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TableIDField, value) != true)) {
                    this.TableIDField = value;
                    this.RaisePropertyChanged("TableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryFunctionCallRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryFunctionCallRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryFunctionCallRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FunctionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryFunctionCallRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeField, value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FunctionID {
            get {
                return this.FunctionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FunctionIDField, value) != true)) {
                    this.FunctionIDField = value;
                    this.RaisePropertyChanged("FunctionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterName {
            get {
                return this.ParameterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterNameField, value) != true)) {
                    this.ParameterNameField = value;
                    this.RaisePropertyChanged("ParameterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryGroupByRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryGroupByRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryGroupByRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpressionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid GroupByIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryGroupByRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Expression {
            get {
                return this.ExpressionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpressionField, value) != true)) {
                    this.ExpressionField = value;
                    this.RaisePropertyChanged("Expression");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid GroupByID {
            get {
                return this.GroupByIDField;
            }
            set {
                if ((this.GroupByIDField.Equals(value) != true)) {
                    this.GroupByIDField = value;
                    this.RaisePropertyChanged("GroupByID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryParameterRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryParameterRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryParameterRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SkipIfEmptyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryParameterRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterLabel {
            get {
                return this.ParameterLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterLabelField, value) != true)) {
                    this.ParameterLabelField = value;
                    this.RaisePropertyChanged("ParameterLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterType {
            get {
                return this.ParameterTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterTypeField, value) != true)) {
                    this.ParameterTypeField = value;
                    this.RaisePropertyChanged("ParameterType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SkipIfEmpty {
            get {
                return this.SkipIfEmptyField;
            }
            set {
                if ((this.SkipIfEmptyField.Equals(value) != true)) {
                    this.SkipIfEmptyField = value;
                    this.RaisePropertyChanged("SkipIfEmpty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryRelationRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryRelationRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChildTableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryRelationRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JoinTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OuterJoinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentTableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid RelationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChildTableID {
            get {
                return this.ChildTableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildTableIDField, value) != true)) {
                    this.ChildTableIDField = value;
                    this.RaisePropertyChanged("ChildTableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryRelationRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFK {
            get {
                return this.IsFKField;
            }
            set {
                if ((this.IsFKField.Equals(value) != true)) {
                    this.IsFKField = value;
                    this.RaisePropertyChanged("IsFK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JoinType {
            get {
                return this.JoinTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.JoinTypeField, value) != true)) {
                    this.JoinTypeField = value;
                    this.RaisePropertyChanged("JoinType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OuterJoin {
            get {
                return this.OuterJoinField;
            }
            set {
                if ((this.OuterJoinField.Equals(value) != true)) {
                    this.OuterJoinField = value;
                    this.RaisePropertyChanged("OuterJoin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentTableID {
            get {
                return this.ParentTableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentTableIDField, value) != true)) {
                    this.ParentTableIDField = value;
                    this.RaisePropertyChanged("ParentTableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RelationID {
            get {
                return this.RelationIDField;
            }
            set {
                if ((this.RelationIDField.Equals(value) != true)) {
                    this.RelationIDField = value;
                    this.RaisePropertyChanged("RelationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryRelationFieldRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryRelationFieldRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AndOrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChildFieldDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ChildFieldIsExprField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChildFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryRelationFieldRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompOpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LeftPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NegField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentFieldDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ParentFieldIsExprField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParentFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid RelationIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RightPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AndOr {
            get {
                return this.AndOrField;
            }
            set {
                if ((object.ReferenceEquals(this.AndOrField, value) != true)) {
                    this.AndOrField = value;
                    this.RaisePropertyChanged("AndOr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChildFieldDataType {
            get {
                return this.ChildFieldDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildFieldDataTypeField, value) != true)) {
                    this.ChildFieldDataTypeField = value;
                    this.RaisePropertyChanged("ChildFieldDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ChildFieldIsExpr {
            get {
                return this.ChildFieldIsExprField;
            }
            set {
                if ((this.ChildFieldIsExprField.Equals(value) != true)) {
                    this.ChildFieldIsExprField = value;
                    this.RaisePropertyChanged("ChildFieldIsExpr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChildFieldName {
            get {
                return this.ChildFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildFieldNameField, value) != true)) {
                    this.ChildFieldNameField = value;
                    this.RaisePropertyChanged("ChildFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryRelationFieldRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompOp {
            get {
                return this.CompOpField;
            }
            set {
                if ((object.ReferenceEquals(this.CompOpField, value) != true)) {
                    this.CompOpField = value;
                    this.RaisePropertyChanged("CompOp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LeftP {
            get {
                return this.LeftPField;
            }
            set {
                if ((object.ReferenceEquals(this.LeftPField, value) != true)) {
                    this.LeftPField = value;
                    this.RaisePropertyChanged("LeftP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Neg {
            get {
                return this.NegField;
            }
            set {
                if ((this.NegField.Equals(value) != true)) {
                    this.NegField = value;
                    this.RaisePropertyChanged("Neg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentFieldDataType {
            get {
                return this.ParentFieldDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFieldDataTypeField, value) != true)) {
                    this.ParentFieldDataTypeField = value;
                    this.RaisePropertyChanged("ParentFieldDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ParentFieldIsExpr {
            get {
                return this.ParentFieldIsExprField;
            }
            set {
                if ((this.ParentFieldIsExprField.Equals(value) != true)) {
                    this.ParentFieldIsExprField = value;
                    this.RaisePropertyChanged("ParentFieldIsExpr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentFieldName {
            get {
                return this.ParentFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentFieldNameField, value) != true)) {
                    this.ParentFieldNameField = value;
                    this.RaisePropertyChanged("ParentFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid RelationID {
            get {
                return this.RelationIDField;
            }
            set {
                if ((this.RelationIDField.Equals(value) != true)) {
                    this.RelationIDField = value;
                    this.RaisePropertyChanged("RelationID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RightP {
            get {
                return this.RightPField;
            }
            set {
                if ((object.ReferenceEquals(this.RightPField, value) != true)) {
                    this.RightPField = value;
                    this.RaisePropertyChanged("RightP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuerySortByRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QuerySortByRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QuerySortByRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QuerySortByRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAsc {
            get {
                return this.IsAscField;
            }
            set {
                if ((this.IsAscField.Equals(value) != true)) {
                    this.IsAscField = value;
                    this.RaisePropertyChanged("IsAsc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableID {
            get {
                return this.TableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TableIDField, value) != true)) {
                    this.TableIDField = value;
                    this.RaisePropertyChanged("TableID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuerySubQueryRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QuerySubQueryRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QuerySubQueryRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUnionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LeftPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderByFetchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OrderByOffSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RightPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectListClauseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TopInPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TopRowExprField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TopWithTiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QuerySubQueryRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnion {
            get {
                return this.IsUnionField;
            }
            set {
                if ((this.IsUnionField.Equals(value) != true)) {
                    this.IsUnionField = value;
                    this.RaisePropertyChanged("IsUnion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LeftP {
            get {
                return this.LeftPField;
            }
            set {
                if ((object.ReferenceEquals(this.LeftPField, value) != true)) {
                    this.LeftPField = value;
                    this.RaisePropertyChanged("LeftP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderByFetch {
            get {
                return this.OrderByFetchField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderByFetchField, value) != true)) {
                    this.OrderByFetchField = value;
                    this.RaisePropertyChanged("OrderByFetch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OrderByOffSet {
            get {
                return this.OrderByOffSetField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderByOffSetField, value) != true)) {
                    this.OrderByOffSetField = value;
                    this.RaisePropertyChanged("OrderByOffSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RightP {
            get {
                return this.RightPField;
            }
            set {
                if ((object.ReferenceEquals(this.RightPField, value) != true)) {
                    this.RightPField = value;
                    this.RaisePropertyChanged("RightP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectListClause {
            get {
                return this.SelectListClauseField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectListClauseField, value) != true)) {
                    this.SelectListClauseField = value;
                    this.RaisePropertyChanged("SelectListClause");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TopInPercent {
            get {
                return this.TopInPercentField;
            }
            set {
                if ((this.TopInPercentField.Equals(value) != true)) {
                    this.TopInPercentField = value;
                    this.RaisePropertyChanged("TopInPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TopRowExpr {
            get {
                return this.TopRowExprField;
            }
            set {
                if ((this.TopRowExprField.Equals(value) != true)) {
                    this.TopRowExprField = value;
                    this.RaisePropertyChanged("TopRowExpr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TopWithTies {
            get {
                return this.TopWithTiesField;
            }
            set {
                if ((this.TopWithTiesField.Equals(value) != true)) {
                    this.TopWithTiesField = value;
                    this.RaisePropertyChanged("TopWithTies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryTableRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryTableRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryTableRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DBSchemaNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DBTableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSummaryTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsVisibleInDesignerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PivotDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PivotFieldFormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PivotFunctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryTableRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DBSchemaName {
            get {
                return this.DBSchemaNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DBSchemaNameField, value) != true)) {
                    this.DBSchemaNameField = value;
                    this.RaisePropertyChanged("DBSchemaName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DBTableName {
            get {
                return this.DBTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DBTableNameField, value) != true)) {
                    this.DBTableNameField = value;
                    this.RaisePropertyChanged("DBTableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSummaryTable {
            get {
                return this.IsSummaryTableField;
            }
            set {
                if ((this.IsSummaryTableField.Equals(value) != true)) {
                    this.IsSummaryTableField = value;
                    this.RaisePropertyChanged("IsSummaryTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVisibleInDesigner {
            get {
                return this.IsVisibleInDesignerField;
            }
            set {
                if ((this.IsVisibleInDesignerField.Equals(value) != true)) {
                    this.IsVisibleInDesignerField = value;
                    this.RaisePropertyChanged("IsVisibleInDesigner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Modifiers {
            get {
                return this.ModifiersField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiersField, value) != true)) {
                    this.ModifiersField = value;
                    this.RaisePropertyChanged("Modifiers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PivotDataType {
            get {
                return this.PivotDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PivotDataTypeField, value) != true)) {
                    this.PivotDataTypeField = value;
                    this.RaisePropertyChanged("PivotDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PivotFieldFormat {
            get {
                return this.PivotFieldFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.PivotFieldFormatField, value) != true)) {
                    this.PivotFieldFormatField = value;
                    this.RaisePropertyChanged("PivotFieldFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PivotFunction {
            get {
                return this.PivotFunctionField;
            }
            set {
                if ((object.ReferenceEquals(this.PivotFunctionField, value) != true)) {
                    this.PivotFunctionField = value;
                    this.RaisePropertyChanged("PivotFunction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableID {
            get {
                return this.TableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TableIDField, value) != true)) {
                    this.TableIDField = value;
                    this.RaisePropertyChanged("TableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableType {
            get {
                return this.TableTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TableTypeField, value) != true)) {
                    this.TableTypeField = value;
                    this.RaisePropertyChanged("TableType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryUpdateFieldRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryUpdateFieldRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryUpdateFieldRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpressionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsKeyFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MapFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MapTableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NetDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryUpdateFieldRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeField, value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Direction {
            get {
                return this.DirectionField;
            }
            set {
                if ((this.DirectionField.Equals(value) != true)) {
                    this.DirectionField = value;
                    this.RaisePropertyChanged("Direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Expression {
            get {
                return this.ExpressionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpressionField, value) != true)) {
                    this.ExpressionField = value;
                    this.RaisePropertyChanged("Expression");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsKeyField {
            get {
                return this.IsKeyFieldField;
            }
            set {
                if ((this.IsKeyFieldField.Equals(value) != true)) {
                    this.IsKeyFieldField = value;
                    this.RaisePropertyChanged("IsKeyField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MapFieldName {
            get {
                return this.MapFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MapFieldNameField, value) != true)) {
                    this.MapFieldNameField = value;
                    this.RaisePropertyChanged("MapFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MapTableName {
            get {
                return this.MapTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MapTableNameField, value) != true)) {
                    this.MapTableNameField = value;
                    this.RaisePropertyChanged("MapTableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NetDataType {
            get {
                return this.NetDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.NetDataTypeField, value) != true)) {
                    this.NetDataTypeField = value;
                    this.RaisePropertyChanged("NetDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QualifiedName {
            get {
                return this.QualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.QualifiedNameField, value) != true)) {
                    this.QualifiedNameField = value;
                    this.RaisePropertyChanged("QualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Required {
            get {
                return this.RequiredField;
            }
            set {
                if ((this.RequiredField.Equals(value) != true)) {
                    this.RequiredField = value;
                    this.RaisePropertyChanged("Required");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryUpdateSettingsRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryUpdateSettingsRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddNewLabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowAddNewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BOSystemCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryUpdateSettingsRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCCtxPwdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCCtxUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCCtxUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCUserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SCWorkflowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SupportMDRField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdatableBOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdatableTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdateMethodField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddNewLabel {
            get {
                return this.AddNewLabelField;
            }
            set {
                if ((object.ReferenceEquals(this.AddNewLabelField, value) != true)) {
                    this.AddNewLabelField = value;
                    this.RaisePropertyChanged("AddNewLabel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowAddNew {
            get {
                return this.AllowAddNewField;
            }
            set {
                if ((this.AllowAddNewField.Equals(value) != true)) {
                    this.AllowAddNewField = value;
                    this.RaisePropertyChanged("AllowAddNew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BOSystemCode {
            get {
                return this.BOSystemCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BOSystemCodeField, value) != true)) {
                    this.BOSystemCodeField = value;
                    this.RaisePropertyChanged("BOSystemCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryUpdateSettingsRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCCtxPwd {
            get {
                return this.SCCtxPwdField;
            }
            set {
                if ((object.ReferenceEquals(this.SCCtxPwdField, value) != true)) {
                    this.SCCtxPwdField = value;
                    this.RaisePropertyChanged("SCCtxPwd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCCtxUrl {
            get {
                return this.SCCtxUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SCCtxUrlField, value) != true)) {
                    this.SCCtxUrlField = value;
                    this.RaisePropertyChanged("SCCtxUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCCtxUser {
            get {
                return this.SCCtxUserField;
            }
            set {
                if ((object.ReferenceEquals(this.SCCtxUserField, value) != true)) {
                    this.SCCtxUserField = value;
                    this.RaisePropertyChanged("SCCtxUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCPassword {
            get {
                return this.SCPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.SCPasswordField, value) != true)) {
                    this.SCPasswordField = value;
                    this.RaisePropertyChanged("SCPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCUrl {
            get {
                return this.SCUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SCUrlField, value) != true)) {
                    this.SCUrlField = value;
                    this.RaisePropertyChanged("SCUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCUserID {
            get {
                return this.SCUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SCUserIDField, value) != true)) {
                    this.SCUserIDField = value;
                    this.RaisePropertyChanged("SCUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SCWorkflow {
            get {
                return this.SCWorkflowField;
            }
            set {
                if ((object.ReferenceEquals(this.SCWorkflowField, value) != true)) {
                    this.SCWorkflowField = value;
                    this.RaisePropertyChanged("SCWorkflow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SupportMDR {
            get {
                return this.SupportMDRField;
            }
            set {
                if ((this.SupportMDRField.Equals(value) != true)) {
                    this.SupportMDRField = value;
                    this.RaisePropertyChanged("SupportMDR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdatableBO {
            get {
                return this.UpdatableBOField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdatableBOField, value) != true)) {
                    this.UpdatableBOField = value;
                    this.RaisePropertyChanged("UpdatableBO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdatableType {
            get {
                return this.UpdatableTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdatableTypeField, value) != true)) {
                    this.UpdatableTypeField = value;
                    this.RaisePropertyChanged("UpdatableType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateMethod {
            get {
                return this.UpdateMethodField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateMethodField, value) != true)) {
                    this.UpdateMethodField = value;
                    this.RaisePropertyChanged("UpdateMethod");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryValueSetItemsRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryValueSetItemsRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryValueSetItemsRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueSetIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryValueSetItemsRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemValue {
            get {
                return this.ItemValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemValueField, value) != true)) {
                    this.ItemValueField = value;
                    this.RaisePropertyChanged("ItemValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueSetID {
            get {
                return this.ValueSetIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueSetIDField, value) != true)) {
                    this.ValueSetIDField = value;
                    this.RaisePropertyChanged("ValueSetID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryWhereItemRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class QueryWhereItemRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AndOrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.QueryWhereItemRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompOpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CriteriaIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CriteriaTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExtSecurityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConstField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LeftPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NegField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RightPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SubQueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SysRevIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToTableIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AndOr {
            get {
                return this.AndOrField;
            }
            set {
                if ((object.ReferenceEquals(this.AndOrField, value) != true)) {
                    this.AndOrField = value;
                    this.RaisePropertyChanged("AndOr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitFlag {
            get {
                return this.BitFlagField;
            }
            set {
                if ((this.BitFlagField.Equals(value) != true)) {
                    this.BitFlagField = value;
                    this.RaisePropertyChanged("BitFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.QueryWhereItemRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompOp {
            get {
                return this.CompOpField;
            }
            set {
                if ((object.ReferenceEquals(this.CompOpField, value) != true)) {
                    this.CompOpField = value;
                    this.RaisePropertyChanged("CompOp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CriteriaID {
            get {
                return this.CriteriaIDField;
            }
            set {
                if ((this.CriteriaIDField.Equals(value) != true)) {
                    this.CriteriaIDField = value;
                    this.RaisePropertyChanged("CriteriaID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CriteriaType {
            get {
                return this.CriteriaTypeField;
            }
            set {
                if ((this.CriteriaTypeField.Equals(value) != true)) {
                    this.CriteriaTypeField = value;
                    this.RaisePropertyChanged("CriteriaType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataType {
            get {
                return this.DataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DataTypeField, value) != true)) {
                    this.DataTypeField = value;
                    this.RaisePropertyChanged("DataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExtSecurity {
            get {
                return this.ExtSecurityField;
            }
            set {
                if ((this.ExtSecurityField.Equals(value) != true)) {
                    this.ExtSecurityField = value;
                    this.RaisePropertyChanged("ExtSecurity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConst {
            get {
                return this.IsConstField;
            }
            set {
                if ((this.IsConstField.Equals(value) != true)) {
                    this.IsConstField = value;
                    this.RaisePropertyChanged("IsConst");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LeftP {
            get {
                return this.LeftPField;
            }
            set {
                if ((object.ReferenceEquals(this.LeftPField, value) != true)) {
                    this.LeftPField = value;
                    this.RaisePropertyChanged("LeftP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Neg {
            get {
                return this.NegField;
            }
            set {
                if ((this.NegField.Equals(value) != true)) {
                    this.NegField = value;
                    this.RaisePropertyChanged("Neg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RValue {
            get {
                return this.RValueField;
            }
            set {
                if ((object.ReferenceEquals(this.RValueField, value) != true)) {
                    this.RValueField = value;
                    this.RaisePropertyChanged("RValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RightP {
            get {
                return this.RightPField;
            }
            set {
                if ((object.ReferenceEquals(this.RightPField, value) != true)) {
                    this.RightPField = value;
                    this.RaisePropertyChanged("RightP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubQueryID {
            get {
                return this.SubQueryIDField;
            }
            set {
                if ((this.SubQueryIDField.Equals(value) != true)) {
                    this.SubQueryIDField = value;
                    this.RaisePropertyChanged("SubQueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SysRevID {
            get {
                return this.SysRevIDField;
            }
            set {
                if ((this.SysRevIDField.Equals(value) != true)) {
                    this.SysRevIDField = value;
                    this.RaisePropertyChanged("SysRevID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableID {
            get {
                return this.TableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TableIDField, value) != true)) {
                    this.TableIDField = value;
                    this.RaisePropertyChanged("TableID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToDataType {
            get {
                return this.ToDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ToDataTypeField, value) != true)) {
                    this.ToDataTypeField = value;
                    this.RaisePropertyChanged("ToDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToFieldName {
            get {
                return this.ToFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ToFieldNameField, value) != true)) {
                    this.ToFieldNameField = value;
                    this.RaisePropertyChanged("ToFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToTableID {
            get {
                return this.ToTableIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ToTableIDField, value) != true)) {
                    this.ToTableIDField = value;
                    this.RaisePropertyChanged("ToTableID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionParameterRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class ExecutionParameterRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionParameterRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEmptyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParameterValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionParameterRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEmpty {
            get {
                return this.IsEmptyField;
            }
            set {
                if ((this.IsEmptyField.Equals(value) != true)) {
                    this.IsEmptyField = value;
                    this.RaisePropertyChanged("IsEmpty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterID {
            get {
                return this.ParameterIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterIDField, value) != true)) {
                    this.ParameterIDField = value;
                    this.RaisePropertyChanged("ParameterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParameterValue {
            get {
                return this.ParameterValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterValueField, value) != true)) {
                    this.ParameterValueField = value;
                    this.RaisePropertyChanged("ParameterValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueType {
            get {
                return this.ValueTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueTypeField, value) != true)) {
                    this.ValueTypeField = value;
                    this.RaisePropertyChanged("ValueType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionSettingRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class ExecutionSettingRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionSettingRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionSettingRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionValueSetItemsRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class ExecutionValueSetItemsRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.ExecutionValueSetItemsRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueSetIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.ExecutionValueSetItemsRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemValue {
            get {
                return this.ItemValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemValueField, value) != true)) {
                    this.ItemValueField = value;
                    this.RaisePropertyChanged("ItemValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueSetID {
            get {
                return this.ValueSetIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueSetIDField, value) != true)) {
                    this.ValueSetIDField = value;
                    this.RaisePropertyChanged("ValueSetID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicQueryListRow", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    [System.SerializableAttribute()]
    public partial class DynamicQueryListRow : BAQExecute_WCF.DynamicQueryService.IceRow {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllCompaniesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CGCCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.DynamicQueryListRowColumnOrder ColumnNamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExtQueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSharedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SystemFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UpdatableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool XCompanyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllCompanies {
            get {
                return this.AllCompaniesField;
            }
            set {
                if ((this.AllCompaniesField.Equals(value) != true)) {
                    this.AllCompaniesField = value;
                    this.RaisePropertyChanged("AllCompanies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorID {
            get {
                return this.AuthorIDField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorIDField, value) != true)) {
                    this.AuthorIDField = value;
                    this.RaisePropertyChanged("AuthorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CGCCode {
            get {
                return this.CGCCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CGCCodeField, value) != true)) {
                    this.CGCCodeField = value;
                    this.RaisePropertyChanged("CGCCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryListRowColumnOrder ColumnNames {
            get {
                return this.ColumnNamesField;
            }
            set {
                if ((this.ColumnNamesField.Equals(value) != true)) {
                    this.ColumnNamesField = value;
                    this.RaisePropertyChanged("ColumnNames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Company {
            get {
                return this.CompanyField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyField, value) != true)) {
                    this.CompanyField = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExtQuery {
            get {
                return this.ExtQueryField;
            }
            set {
                if ((this.ExtQueryField.Equals(value) != true)) {
                    this.ExtQueryField = value;
                    this.RaisePropertyChanged("ExtQuery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsShared {
            get {
                return this.IsSharedField;
            }
            set {
                if ((this.IsSharedField.Equals(value) != true)) {
                    this.IsSharedField = value;
                    this.RaisePropertyChanged("IsShared");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QueryID {
            get {
                return this.QueryIDField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryIDField, value) != true)) {
                    this.QueryIDField = value;
                    this.RaisePropertyChanged("QueryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SystemFlag {
            get {
                return this.SystemFlagField;
            }
            set {
                if ((this.SystemFlagField.Equals(value) != true)) {
                    this.SystemFlagField = value;
                    this.RaisePropertyChanged("SystemFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Updatable {
            get {
                return this.UpdatableField;
            }
            set {
                if ((this.UpdatableField.Equals(value) != true)) {
                    this.UpdatableField = value;
                    this.RaisePropertyChanged("Updatable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool XCompany {
            get {
                return this.XCompanyField;
            }
            set {
                if ((this.XCompanyField.Equals(value) != true)) {
                    this.XCompanyField = value;
                    this.RaisePropertyChanged("XCompany");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserDefinedColumns", Namespace="http://epicor.com/UserDefinedColumns", ItemName="Column", KeyName="Name", ValueName="Value")]
    [System.SerializableAttribute()]
    public class UserDefinedColumns : System.Collections.Generic.Dictionary<string, object> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionFilterRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum ExecutionFilterRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataTableID = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldName = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neg = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompOp = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RValue = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicQueryRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum DynamicQueryRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AuthorID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Description = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayPhrase = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsShared = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Version = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CGCCode = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XCompany = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GlbCompany = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updatable = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExtQuery = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExtDatasourceName = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Extension = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllCompanies = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 20,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryCtrlRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryCtrlRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ControlID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataSource = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataType = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldFormat = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsMandatory = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DefaultValue = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ControlType = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SourceType = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ListSource = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayColumn = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValueColumn = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 18,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryCtrlValuesRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryCtrlValuesRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ControlID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Val = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryCustomActionRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryCustomActionRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActionID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActionLabel = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryExecuteSettingRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryExecuteSettingRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SettingID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SettingValue = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryFieldRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryFieldRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TableID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldName = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DBSchemaName = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DBTableName = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DBFieldName = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataType = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Description = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        External = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsCalculated = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Formula = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldFormat = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldLabel = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LikeDataFieldTableID = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LikeDataFieldSeq = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Aggregation = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsGroupBy = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseLike = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LikeDataFieldName = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updatable = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RaiseEvent = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QuickSearchID = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DropDown = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdInitExpression = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Alias = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayName = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 33,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryFieldAttributeRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryFieldAttributeRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TableID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldName = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AttributeName = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Value = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsOverriden = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 13,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryFunctionCallRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryFunctionCallRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FunctionID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParameterName = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Value = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataType = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 13,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryGroupByRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryGroupByRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GroupByID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Expression = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryParameterRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryParameterRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParameterID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParameterType = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParameterLabel = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SkipIfEmpty = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 10,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryRelationRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryRelationRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RelationID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsFK = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParentTableID = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChildTableID = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JoinType = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OuterJoin = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 13,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryRelationFieldRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryRelationFieldRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RelationID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParentFieldName = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParentFieldDataType = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParentFieldIsExpr = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChildFieldName = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChildFieldDataType = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChildFieldIsExpr = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AndOr = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neg = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LeftP = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RightP = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompOp = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 20,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuerySortByRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QuerySortByRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TableID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldName = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsAsc = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisplayName = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 12,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuerySubQueryRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QuerySubQueryRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Type = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsUnion = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LeftP = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RightP = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SelectListClause = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopRowExpr = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopInPercent = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopWithTies = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OrderByOffSet = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OrderByFetch = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 19,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryTableRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryTableRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TableID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DBSchemaName = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DBTableName = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TableType = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsSummaryTable = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsVisibleInDesigner = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Modifiers = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PivotFunction = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PivotDataType = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PivotFieldFormat = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 19,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryUpdateFieldRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryUpdateFieldRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MapTableName = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MapFieldName = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Direction = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Expression = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsKeyField = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NetDataType = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataType = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QualifiedName = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Required = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Description = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 17,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryUpdateSettingsRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryUpdateSettingsRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowAddNew = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AddNewLabel = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SupportMDR = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdatableType = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdatableBO = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BOSystemCode = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UpdateMethod = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCUrl = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCWorkflow = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCCtxUser = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCCtxPwd = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCUserID = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCPassword = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SCCtxUrl = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 21,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryValueSetItemsRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryValueSetItemsRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValueSetID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ItemValue = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QueryWhereItemRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum QueryWhereItemRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubQueryID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TableID = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CriteriaID = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Seq = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldName = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataType = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompOp = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AndOr = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neg = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LeftP = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RightP = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsConst = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CriteriaType = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToTableID = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToFieldName = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ToDataType = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RValue = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExtSecurity = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRevID = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BitFlag = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 24,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionParameterRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum ExecutionParameterRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParameterID = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ParameterValue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValueType = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsEmpty = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionSettingRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum ExecutionSettingRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Value = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExecutionValueSetItemsRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum ExecutionValueSetItemsRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ValueSetID = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ItemValue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DynamicQueryListRowColumnOrder", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets")]
    public enum DynamicQueryListRowColumnOrder : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Company = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueryID = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AuthorID = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Description = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IsShared = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CGCCode = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XCompany = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Updatable = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ExtQuery = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemFlag = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SysRowID = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllCompanies = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RowMod = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecifiedProperties = 13,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="DynamicQueryListTable", Namespace="http://schemas.datacontract.org/2004/07/Ice.Tablesets", ItemName="DynamicQueryListRow")]
    [System.SerializableAttribute()]
    public class DynamicQueryListTable : System.Collections.Generic.List<BAQExecute_WCF.DynamicQueryService.DynamicQueryListRow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorFaultDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.EpicorExceptionData[] DataListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionKindValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail InnerFaultDetailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exKindQualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string m_exceptionQualifiedNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.EpicorExceptionData[] DataList {
            get {
                return this.DataListField;
            }
            set {
                if ((object.ReferenceEquals(this.DataListField, value) != true)) {
                    this.DataListField = value;
                    this.RaisePropertyChanged("DataList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionKindValue {
            get {
                return this.ExceptionKindValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionKindValueField, value) != true)) {
                    this.ExceptionKindValueField = value;
                    this.RaisePropertyChanged("ExceptionKindValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail InnerFaultDetail {
            get {
                return this.InnerFaultDetailField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerFaultDetailField, value) != true)) {
                    this.InnerFaultDetailField = value;
                    this.RaisePropertyChanged("InnerFaultDetail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exKindQualifiedName {
            get {
                return this.m_exKindQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exKindQualifiedNameField, value) != true)) {
                    this.m_exKindQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exKindQualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string m_exceptionQualifiedName {
            get {
                return this.m_exceptionQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.m_exceptionQualifiedNameField, value) != true)) {
                    this.m_exceptionQualifiedNameField = value;
                    this.RaisePropertyChanged("m_exceptionQualifiedName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EpicorExceptionData", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
    [System.SerializableAttribute()]
    public partial class EpicorExceptionData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int m_ColumnNumberField;
        
        private int m_LineNumberField;
        
        private string m_MessageField;
        
        private string[] m_MessageDetailsField;
        
        private string m_MethodField;
        
        private string m_ProgramField;
        
        private System.Collections.Generic.Dictionary<string, string> m_PropertiesField;
        
        private string m_TraceStackField;
        
        private System.Collections.Generic.Dictionary<string, string> m_UserPropertiesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_ColumnNumber {
            get {
                return this.m_ColumnNumberField;
            }
            set {
                if ((this.m_ColumnNumberField.Equals(value) != true)) {
                    this.m_ColumnNumberField = value;
                    this.RaisePropertyChanged("m_ColumnNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int m_LineNumber {
            get {
                return this.m_LineNumberField;
            }
            set {
                if ((this.m_LineNumberField.Equals(value) != true)) {
                    this.m_LineNumberField = value;
                    this.RaisePropertyChanged("m_LineNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Message {
            get {
                return this.m_MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageField, value) != true)) {
                    this.m_MessageField = value;
                    this.RaisePropertyChanged("m_Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string[] m_MessageDetails {
            get {
                return this.m_MessageDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MessageDetailsField, value) != true)) {
                    this.m_MessageDetailsField = value;
                    this.RaisePropertyChanged("m_MessageDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Method {
            get {
                return this.m_MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.m_MethodField, value) != true)) {
                    this.m_MethodField = value;
                    this.RaisePropertyChanged("m_Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_Program {
            get {
                return this.m_ProgramField;
            }
            set {
                if ((object.ReferenceEquals(this.m_ProgramField, value) != true)) {
                    this.m_ProgramField = value;
                    this.RaisePropertyChanged("m_Program");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_Properties {
            get {
                return this.m_PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_PropertiesField, value) != true)) {
                    this.m_PropertiesField = value;
                    this.RaisePropertyChanged("m_Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string m_TraceStack {
            get {
                return this.m_TraceStackField;
            }
            set {
                if ((object.ReferenceEquals(this.m_TraceStackField, value) != true)) {
                    this.m_TraceStackField = value;
                    this.RaisePropertyChanged("m_TraceStack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Collections.Generic.Dictionary<string, string> m_UserProperties {
            get {
                return this.m_UserPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.m_UserPropertiesField, value) != true)) {
                    this.m_UserPropertiesField = value;
                    this.RaisePropertyChanged("m_UserProperties");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Ice:BO:DynamicQuery", ConfigurationName="DynamicQueryService.DynamicQuerySvcContract")]
    public interface DynamicQuerySvcContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDs", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDsEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset GetByIDs(string[] queryIDList);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDs", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDsResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset> GetByIDsAsync(string[] queryIDList);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteByIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet ExecuteByID(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteByIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecuteByIDAsync(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/Execute", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet Execute(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/Execute", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/ExecuteResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecuteAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/CheckTestQueryExecution", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/CheckTestQueryExecutionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/CheckTestQueryExecutionEpicorFaultDet" +
            "ailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        bool CheckTestQueryExecution(System.Guid executionToken, string extDsn, bool cancelExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/CheckTestQueryExecution", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/CheckTestQueryExecutionResponse")]
        System.Threading.Tasks.Task<bool> CheckTestQueryExecutionAsync(System.Guid executionToken, string extDsn, bool cancelExecution);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionPlan", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionPlanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionPlanEpicorFaultDetai" +
            "lFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        string GetQueryExecutionPlan(System.Guid executionToken, string extDsn);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionPlan", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionPlanResponse")]
        System.Threading.Tasks.Task<string> GetQueryExecutionPlanAsync(System.Guid executionToken, string extDsn);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListFromLike", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListFromLikeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListFromLikeEpicorFaultDetail" +
            "Fault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset GetQueryListFromLike(string likeTableName, string likeFieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListFromLike", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListFromLikeResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset> GetQueryListFromLikeAsync(string likeTableName, string likeFieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParameters", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersEpicorFaul" +
            "tDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset GetQueryExecutionParameters(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParameters", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset> GetQueryExecutionParametersAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersByIDRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersByIDEpicor" +
            "FaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset GetQueryExecutionParametersByID(string queryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryExecutionParametersByIDRespon" +
            "se")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset> GetQueryExecutionParametersByIDAsync(string queryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSet", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetEpicorFaultDeta" +
            "ilFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet GetQueryEmptyResultSet(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSet", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetQueryEmptyResultSetAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDEpicorFault" +
            "DetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet GetQueryEmptyResultSetByID(string queryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetQueryEmptyResultSetByIDAsync(string queryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDAndCompany", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDAndCompanyR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDAndCompanyE" +
            "picorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet GetQueryEmptyResultSetByIDAndCompany(string queryID, string companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDAndCompany", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryEmptyResultSetByIDAndCompanyR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetQueryEmptyResultSetByIDAndCompanyAsync(string queryID, string companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/Analyze", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/AnalyzeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/AnalyzeEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.AnalyzeResponse Analyze(BAQExecute_WCF.DynamicQueryService.AnalyzeRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/Analyze", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/AnalyzeResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.AnalyzeResponse> AnalyzeAsync(BAQExecute_WCF.DynamicQueryService.AnalyzeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetRows", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetRowsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetRowsEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.GetRowsResponse GetRows(BAQExecute_WCF.DynamicQueryService.GetRowsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetRows", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetRowsResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetRowsResponse> GetRowsAsync(BAQExecute_WCF.DynamicQueryService.GetRowsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryList", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.GetQueryListResponse GetQueryList(BAQExecute_WCF.DynamicQueryService.GetQueryListRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryList", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetQueryListResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetQueryListResponse> GetQueryListAsync(BAQExecute_WCF.DynamicQueryService.GetQueryListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetList", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.GetListResponse GetList(BAQExecute_WCF.DynamicQueryService.GetListRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetList", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetListResponse> GetListAsync(BAQExecute_WCF.DynamicQueryService.GetListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListByIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.GetListByIDResponse GetListByID(BAQExecute_WCF.DynamicQueryService.GetListByIDRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetListByIDResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetListByIDResponse> GetListByIDAsync(BAQExecute_WCF.DynamicQueryService.GetListByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/Update", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet Update(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/Update", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> UpdateAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateByIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet UpdateByID(string queryID, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/UpdateByIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> UpdateByIDAsync(string queryID, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNew", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet GetNew(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNew", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNewAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewByIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet GetNewByID(string queryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetNewByIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNewByIDAsync(string queryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdate", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet FieldUpdate(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string fieldName, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdate", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FieldUpdateAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string fieldName, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateByIDEpicorFaultDetailFault" +
            "", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet FieldUpdateByID(string queryID, string fieldName, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldUpdateByIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> FieldUpdateByIDAsync(string queryID, string fieldName, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidate", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.FieldValidateResponse FieldValidate(BAQExecute_WCF.DynamicQueryService.FieldValidateRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidate", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.FieldValidateResponse> FieldValidateAsync(BAQExecute_WCF.DynamicQueryService.FieldValidateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateByIDEpicorFaultDetailFau" +
            "lt", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.FieldValidateByIDResponse FieldValidateByID(BAQExecute_WCF.DynamicQueryService.FieldValidateByIDRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/FieldValidateByIDResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.FieldValidateByIDResponse> FieldValidateByIDAsync(BAQExecute_WCF.DynamicQueryService.FieldValidateByIDRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomAction", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionEpicorFaultDetailFault" +
            "", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet RunCustomAction(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string actionID, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomAction", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> RunCustomActionAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string actionID, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionByIDEpicorFaultDetailF" +
            "ault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet RunCustomActionByID(string queryID, string actionID, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/RunCustomActionByIDResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> RunCustomActionByIDAsync(string queryID, string actionID, System.Data.DataSet queryResultDataset);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetDistinctValues", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetDistinctValuesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetDistinctValuesEpicorFaultDetailFau" +
            "lt", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        System.Data.DataSet GetDistinctValues(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, string[] distinctFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetDistinctValues", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetDistinctValuesResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetDistinctValuesAsync(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, string[] distinctFields);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BAQExecute_WCF.DynamicQueryService.EpicorFaultDetail), Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDEpicorFaultDetailFault", Name="EpicorFaultDetail", Namespace="http://schemas.datacontract.org/2004/07/Ice.Common")]
        BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset GetByID(string queryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByID", ReplyAction="Ice:BO:DynamicQuery/DynamicQuerySvcContract/GetByIDResponse")]
        System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset> GetByIDAsync(string queryID);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Analyze", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class AnalyzeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams;
        
        public AnalyzeRequest() {
        }
        
        public AnalyzeRequest(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams) {
            this.queryDS = queryDS;
            this.executionParams = executionParams;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AnalyzeResponse", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class AnalyzeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public bool AnalyzeResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public string[] errorMessages;
        
        public AnalyzeResponse() {
        }
        
        public AnalyzeResponse(bool AnalyzeResult, string[] errorMessages) {
            this.AnalyzeResult = AnalyzeResult;
            this.errorMessages = errorMessages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRows", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetRowsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public string whereClauseDynamicQuery;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public string whereClauseQueryCtrl;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=2)]
        public string whereClauseQueryCtrlValues;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=3)]
        public string whereClauseQueryCustomAction;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=4)]
        public string whereClauseQueryExecuteSetting;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=5)]
        public string whereClauseQueryParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=6)]
        public string whereClauseQuerySubQuery;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=7)]
        public string whereClauseQueryRelation;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=8)]
        public string whereClauseQueryRelationField;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=9)]
        public string whereClauseQuerySortBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=10)]
        public string whereClauseQueryWhereItem;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=11)]
        public string whereClauseQueryGroupBy;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=12)]
        public string whereClauseQueryTable;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=13)]
        public string whereClauseQueryField;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=14)]
        public string whereClauseQueryFunctionCall;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=15)]
        public string whereClauseQueryUpdateField;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=16)]
        public string whereClauseQueryUpdateSettings;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=17)]
        public string whereClauseQueryValueSetItems;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=18)]
        public string whereClauseQueryFieldAttribute;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=19)]
        public int pageSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=20)]
        public int absolutePage;
        
        public GetRowsRequest() {
        }
        
        public GetRowsRequest(
                    string whereClauseDynamicQuery, 
                    string whereClauseQueryCtrl, 
                    string whereClauseQueryCtrlValues, 
                    string whereClauseQueryCustomAction, 
                    string whereClauseQueryExecuteSetting, 
                    string whereClauseQueryParameter, 
                    string whereClauseQuerySubQuery, 
                    string whereClauseQueryRelation, 
                    string whereClauseQueryRelationField, 
                    string whereClauseQuerySortBy, 
                    string whereClauseQueryWhereItem, 
                    string whereClauseQueryGroupBy, 
                    string whereClauseQueryTable, 
                    string whereClauseQueryField, 
                    string whereClauseQueryFunctionCall, 
                    string whereClauseQueryUpdateField, 
                    string whereClauseQueryUpdateSettings, 
                    string whereClauseQueryValueSetItems, 
                    string whereClauseQueryFieldAttribute, 
                    int pageSize, 
                    int absolutePage) {
            this.whereClauseDynamicQuery = whereClauseDynamicQuery;
            this.whereClauseQueryCtrl = whereClauseQueryCtrl;
            this.whereClauseQueryCtrlValues = whereClauseQueryCtrlValues;
            this.whereClauseQueryCustomAction = whereClauseQueryCustomAction;
            this.whereClauseQueryExecuteSetting = whereClauseQueryExecuteSetting;
            this.whereClauseQueryParameter = whereClauseQueryParameter;
            this.whereClauseQuerySubQuery = whereClauseQuerySubQuery;
            this.whereClauseQueryRelation = whereClauseQueryRelation;
            this.whereClauseQueryRelationField = whereClauseQueryRelationField;
            this.whereClauseQuerySortBy = whereClauseQuerySortBy;
            this.whereClauseQueryWhereItem = whereClauseQueryWhereItem;
            this.whereClauseQueryGroupBy = whereClauseQueryGroupBy;
            this.whereClauseQueryTable = whereClauseQueryTable;
            this.whereClauseQueryField = whereClauseQueryField;
            this.whereClauseQueryFunctionCall = whereClauseQueryFunctionCall;
            this.whereClauseQueryUpdateField = whereClauseQueryUpdateField;
            this.whereClauseQueryUpdateSettings = whereClauseQueryUpdateSettings;
            this.whereClauseQueryValueSetItems = whereClauseQueryValueSetItems;
            this.whereClauseQueryFieldAttribute = whereClauseQueryFieldAttribute;
            this.pageSize = pageSize;
            this.absolutePage = absolutePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRowsResponse", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetRowsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset GetRowsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public bool morePages;
        
        public GetRowsResponse() {
        }
        
        public GetRowsResponse(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset GetRowsResult, bool morePages) {
            this.GetRowsResult = GetRowsResult;
            this.morePages = morePages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueryList", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetQueryListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public string whereClause;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public int pageSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=2)]
        public int absolutePage;
        
        public GetQueryListRequest() {
        }
        
        public GetQueryListRequest(string whereClause, int pageSize, int absolutePage) {
            this.whereClause = whereClause;
            this.pageSize = pageSize;
            this.absolutePage = absolutePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueryListResponse", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetQueryListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset GetQueryListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public bool morePages;
        
        public GetQueryListResponse() {
        }
        
        public GetQueryListResponse(BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset GetQueryListResult, bool morePages) {
            this.GetQueryListResult = GetQueryListResult;
            this.morePages = morePages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetList", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetListRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=2)]
        public int pageSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=3)]
        public int absolutePage;
        
        public GetListRequest() {
        }
        
        public GetListRequest(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, int pageSize, int absolutePage) {
            this.queryDS = queryDS;
            this.executionParams = executionParams;
            this.pageSize = pageSize;
            this.absolutePage = absolutePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetListResponse", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetListResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public System.Data.DataSet GetListResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public bool hasMorePage;
        
        public GetListResponse() {
        }
        
        public GetListResponse(System.Data.DataSet GetListResult, bool hasMorePage) {
            this.GetListResult = GetListResult;
            this.hasMorePage = hasMorePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetListByID", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetListByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public string queryID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=2)]
        public int pageSize;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=3)]
        public int absolutePage;
        
        public GetListByIDRequest() {
        }
        
        public GetListByIDRequest(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, int pageSize, int absolutePage) {
            this.queryID = queryID;
            this.executionParams = executionParams;
            this.pageSize = pageSize;
            this.absolutePage = absolutePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetListByIDResponse", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class GetListByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public System.Data.DataSet GetListByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public bool hasMorePage;
        
        public GetListByIDResponse() {
        }
        
        public GetListByIDResponse(System.Data.DataSet GetListByIDResult, bool hasMorePage) {
            this.GetListByIDResult = GetListByIDResult;
            this.hasMorePage = hasMorePage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FieldValidate", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class FieldValidateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public string fieldName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=2)]
        public System.Data.DataSet queryResultDataset;
        
        public FieldValidateRequest() {
        }
        
        public FieldValidateRequest(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string fieldName, System.Data.DataSet queryResultDataset) {
            this.queryDS = queryDS;
            this.fieldName = fieldName;
            this.queryResultDataset = queryResultDataset;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FieldValidateResponse", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class FieldValidateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public System.Data.DataSet FieldValidateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public bool isValid;
        
        public FieldValidateResponse() {
        }
        
        public FieldValidateResponse(System.Data.DataSet FieldValidateResult, bool isValid) {
            this.FieldValidateResult = FieldValidateResult;
            this.isValid = isValid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FieldValidateByID", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class FieldValidateByIDRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public string queryID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public string fieldName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=2)]
        public System.Data.DataSet queryResultDataset;
        
        public FieldValidateByIDRequest() {
        }
        
        public FieldValidateByIDRequest(string queryID, string fieldName, System.Data.DataSet queryResultDataset) {
            this.queryID = queryID;
            this.fieldName = fieldName;
            this.queryResultDataset = queryResultDataset;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FieldValidateByIDResponse", WrapperNamespace="Ice:BO:DynamicQuery", IsWrapped=true)]
    public partial class FieldValidateByIDResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=0)]
        public System.Data.DataSet FieldValidateByIDResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Ice:BO:DynamicQuery", Order=1)]
        public bool isValid;
        
        public FieldValidateByIDResponse() {
        }
        
        public FieldValidateByIDResponse(System.Data.DataSet FieldValidateByIDResult, bool isValid) {
            this.FieldValidateByIDResult = FieldValidateByIDResult;
            this.isValid = isValid;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DynamicQuerySvcContractChannel : BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DynamicQuerySvcContractClient : System.ServiceModel.ClientBase<BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract>, BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract {
        
        public DynamicQuerySvcContractClient() {
        }
        
        public DynamicQuerySvcContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DynamicQuerySvcContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DynamicQuerySvcContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DynamicQuerySvcContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset GetByIDs(string[] queryIDList) {
            return base.Channel.GetByIDs(queryIDList);
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset> GetByIDsAsync(string[] queryIDList) {
            return base.Channel.GetByIDsAsync(queryIDList);
        }
        
        public System.Data.DataSet ExecuteByID(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams) {
            return base.Channel.ExecuteByID(queryID, executionParams);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecuteByIDAsync(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams) {
            return base.Channel.ExecuteByIDAsync(queryID, executionParams);
        }
        
        public System.Data.DataSet Execute(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams) {
            return base.Channel.Execute(queryDS, executionParams);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecuteAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams) {
            return base.Channel.ExecuteAsync(queryDS, executionParams);
        }
        
        public bool CheckTestQueryExecution(System.Guid executionToken, string extDsn, bool cancelExecution) {
            return base.Channel.CheckTestQueryExecution(executionToken, extDsn, cancelExecution);
        }
        
        public System.Threading.Tasks.Task<bool> CheckTestQueryExecutionAsync(System.Guid executionToken, string extDsn, bool cancelExecution) {
            return base.Channel.CheckTestQueryExecutionAsync(executionToken, extDsn, cancelExecution);
        }
        
        public string GetQueryExecutionPlan(System.Guid executionToken, string extDsn) {
            return base.Channel.GetQueryExecutionPlan(executionToken, extDsn);
        }
        
        public System.Threading.Tasks.Task<string> GetQueryExecutionPlanAsync(System.Guid executionToken, string extDsn) {
            return base.Channel.GetQueryExecutionPlanAsync(executionToken, extDsn);
        }
        
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset GetQueryListFromLike(string likeTableName, string likeFieldName) {
            return base.Channel.GetQueryListFromLike(likeTableName, likeFieldName);
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset> GetQueryListFromLikeAsync(string likeTableName, string likeFieldName) {
            return base.Channel.GetQueryListFromLikeAsync(likeTableName, likeFieldName);
        }
        
        public BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset GetQueryExecutionParameters(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS) {
            return base.Channel.GetQueryExecutionParameters(queryDS);
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset> GetQueryExecutionParametersAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS) {
            return base.Channel.GetQueryExecutionParametersAsync(queryDS);
        }
        
        public BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset GetQueryExecutionParametersByID(string queryID) {
            return base.Channel.GetQueryExecutionParametersByID(queryID);
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset> GetQueryExecutionParametersByIDAsync(string queryID) {
            return base.Channel.GetQueryExecutionParametersByIDAsync(queryID);
        }
        
        public System.Data.DataSet GetQueryEmptyResultSet(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS) {
            return base.Channel.GetQueryEmptyResultSet(queryDS);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetQueryEmptyResultSetAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS) {
            return base.Channel.GetQueryEmptyResultSetAsync(queryDS);
        }
        
        public System.Data.DataSet GetQueryEmptyResultSetByID(string queryID) {
            return base.Channel.GetQueryEmptyResultSetByID(queryID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetQueryEmptyResultSetByIDAsync(string queryID) {
            return base.Channel.GetQueryEmptyResultSetByIDAsync(queryID);
        }
        
        public System.Data.DataSet GetQueryEmptyResultSetByIDAndCompany(string queryID, string companyID) {
            return base.Channel.GetQueryEmptyResultSetByIDAndCompany(queryID, companyID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetQueryEmptyResultSetByIDAndCompanyAsync(string queryID, string companyID) {
            return base.Channel.GetQueryEmptyResultSetByIDAndCompanyAsync(queryID, companyID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BAQExecute_WCF.DynamicQueryService.AnalyzeResponse BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract.Analyze(BAQExecute_WCF.DynamicQueryService.AnalyzeRequest request) {
            return base.Channel.Analyze(request);
        }
        
        public bool Analyze(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, out string[] errorMessages) {
            BAQExecute_WCF.DynamicQueryService.AnalyzeRequest inValue = new BAQExecute_WCF.DynamicQueryService.AnalyzeRequest();
            inValue.queryDS = queryDS;
            inValue.executionParams = executionParams;
            BAQExecute_WCF.DynamicQueryService.AnalyzeResponse retVal = ((BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract)(this)).Analyze(inValue);
            errorMessages = retVal.errorMessages;
            return retVal.AnalyzeResult;
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.AnalyzeResponse> AnalyzeAsync(BAQExecute_WCF.DynamicQueryService.AnalyzeRequest request) {
            return base.Channel.AnalyzeAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BAQExecute_WCF.DynamicQueryService.GetRowsResponse BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract.GetRows(BAQExecute_WCF.DynamicQueryService.GetRowsRequest request) {
            return base.Channel.GetRows(request);
        }
        
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset GetRows(
                    string whereClauseDynamicQuery, 
                    string whereClauseQueryCtrl, 
                    string whereClauseQueryCtrlValues, 
                    string whereClauseQueryCustomAction, 
                    string whereClauseQueryExecuteSetting, 
                    string whereClauseQueryParameter, 
                    string whereClauseQuerySubQuery, 
                    string whereClauseQueryRelation, 
                    string whereClauseQueryRelationField, 
                    string whereClauseQuerySortBy, 
                    string whereClauseQueryWhereItem, 
                    string whereClauseQueryGroupBy, 
                    string whereClauseQueryTable, 
                    string whereClauseQueryField, 
                    string whereClauseQueryFunctionCall, 
                    string whereClauseQueryUpdateField, 
                    string whereClauseQueryUpdateSettings, 
                    string whereClauseQueryValueSetItems, 
                    string whereClauseQueryFieldAttribute, 
                    int pageSize, 
                    int absolutePage, 
                    out bool morePages) {
            BAQExecute_WCF.DynamicQueryService.GetRowsRequest inValue = new BAQExecute_WCF.DynamicQueryService.GetRowsRequest();
            inValue.whereClauseDynamicQuery = whereClauseDynamicQuery;
            inValue.whereClauseQueryCtrl = whereClauseQueryCtrl;
            inValue.whereClauseQueryCtrlValues = whereClauseQueryCtrlValues;
            inValue.whereClauseQueryCustomAction = whereClauseQueryCustomAction;
            inValue.whereClauseQueryExecuteSetting = whereClauseQueryExecuteSetting;
            inValue.whereClauseQueryParameter = whereClauseQueryParameter;
            inValue.whereClauseQuerySubQuery = whereClauseQuerySubQuery;
            inValue.whereClauseQueryRelation = whereClauseQueryRelation;
            inValue.whereClauseQueryRelationField = whereClauseQueryRelationField;
            inValue.whereClauseQuerySortBy = whereClauseQuerySortBy;
            inValue.whereClauseQueryWhereItem = whereClauseQueryWhereItem;
            inValue.whereClauseQueryGroupBy = whereClauseQueryGroupBy;
            inValue.whereClauseQueryTable = whereClauseQueryTable;
            inValue.whereClauseQueryField = whereClauseQueryField;
            inValue.whereClauseQueryFunctionCall = whereClauseQueryFunctionCall;
            inValue.whereClauseQueryUpdateField = whereClauseQueryUpdateField;
            inValue.whereClauseQueryUpdateSettings = whereClauseQueryUpdateSettings;
            inValue.whereClauseQueryValueSetItems = whereClauseQueryValueSetItems;
            inValue.whereClauseQueryFieldAttribute = whereClauseQueryFieldAttribute;
            inValue.pageSize = pageSize;
            inValue.absolutePage = absolutePage;
            BAQExecute_WCF.DynamicQueryService.GetRowsResponse retVal = ((BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract)(this)).GetRows(inValue);
            morePages = retVal.morePages;
            return retVal.GetRowsResult;
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetRowsResponse> GetRowsAsync(BAQExecute_WCF.DynamicQueryService.GetRowsRequest request) {
            return base.Channel.GetRowsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BAQExecute_WCF.DynamicQueryService.GetQueryListResponse BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract.GetQueryList(BAQExecute_WCF.DynamicQueryService.GetQueryListRequest request) {
            return base.Channel.GetQueryList(request);
        }
        
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryListTableset GetQueryList(string whereClause, int pageSize, int absolutePage, out bool morePages) {
            BAQExecute_WCF.DynamicQueryService.GetQueryListRequest inValue = new BAQExecute_WCF.DynamicQueryService.GetQueryListRequest();
            inValue.whereClause = whereClause;
            inValue.pageSize = pageSize;
            inValue.absolutePage = absolutePage;
            BAQExecute_WCF.DynamicQueryService.GetQueryListResponse retVal = ((BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract)(this)).GetQueryList(inValue);
            morePages = retVal.morePages;
            return retVal.GetQueryListResult;
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetQueryListResponse> GetQueryListAsync(BAQExecute_WCF.DynamicQueryService.GetQueryListRequest request) {
            return base.Channel.GetQueryListAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BAQExecute_WCF.DynamicQueryService.GetListResponse BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract.GetList(BAQExecute_WCF.DynamicQueryService.GetListRequest request) {
            return base.Channel.GetList(request);
        }
        
        public System.Data.DataSet GetList(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, int pageSize, int absolutePage, out bool hasMorePage) {
            BAQExecute_WCF.DynamicQueryService.GetListRequest inValue = new BAQExecute_WCF.DynamicQueryService.GetListRequest();
            inValue.queryDS = queryDS;
            inValue.executionParams = executionParams;
            inValue.pageSize = pageSize;
            inValue.absolutePage = absolutePage;
            BAQExecute_WCF.DynamicQueryService.GetListResponse retVal = ((BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract)(this)).GetList(inValue);
            hasMorePage = retVal.hasMorePage;
            return retVal.GetListResult;
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetListResponse> GetListAsync(BAQExecute_WCF.DynamicQueryService.GetListRequest request) {
            return base.Channel.GetListAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BAQExecute_WCF.DynamicQueryService.GetListByIDResponse BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract.GetListByID(BAQExecute_WCF.DynamicQueryService.GetListByIDRequest request) {
            return base.Channel.GetListByID(request);
        }
        
        public System.Data.DataSet GetListByID(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, int pageSize, int absolutePage, out bool hasMorePage) {
            BAQExecute_WCF.DynamicQueryService.GetListByIDRequest inValue = new BAQExecute_WCF.DynamicQueryService.GetListByIDRequest();
            inValue.queryID = queryID;
            inValue.executionParams = executionParams;
            inValue.pageSize = pageSize;
            inValue.absolutePage = absolutePage;
            BAQExecute_WCF.DynamicQueryService.GetListByIDResponse retVal = ((BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract)(this)).GetListByID(inValue);
            hasMorePage = retVal.hasMorePage;
            return retVal.GetListByIDResult;
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.GetListByIDResponse> GetListByIDAsync(BAQExecute_WCF.DynamicQueryService.GetListByIDRequest request) {
            return base.Channel.GetListByIDAsync(request);
        }
        
        public System.Data.DataSet Update(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, System.Data.DataSet queryResultDataset) {
            return base.Channel.Update(queryDS, queryResultDataset);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UpdateAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, System.Data.DataSet queryResultDataset) {
            return base.Channel.UpdateAsync(queryDS, queryResultDataset);
        }
        
        public System.Data.DataSet UpdateByID(string queryID, System.Data.DataSet queryResultDataset) {
            return base.Channel.UpdateByID(queryID, queryResultDataset);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UpdateByIDAsync(string queryID, System.Data.DataSet queryResultDataset) {
            return base.Channel.UpdateByIDAsync(queryID, queryResultDataset);
        }
        
        public System.Data.DataSet GetNew(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS) {
            return base.Channel.GetNew(queryDS);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNewAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS) {
            return base.Channel.GetNewAsync(queryDS);
        }
        
        public System.Data.DataSet GetNewByID(string queryID) {
            return base.Channel.GetNewByID(queryID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNewByIDAsync(string queryID) {
            return base.Channel.GetNewByIDAsync(queryID);
        }
        
        public System.Data.DataSet FieldUpdate(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string fieldName, System.Data.DataSet queryResultDataset) {
            return base.Channel.FieldUpdate(queryDS, fieldName, queryResultDataset);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FieldUpdateAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string fieldName, System.Data.DataSet queryResultDataset) {
            return base.Channel.FieldUpdateAsync(queryDS, fieldName, queryResultDataset);
        }
        
        public System.Data.DataSet FieldUpdateByID(string queryID, string fieldName, System.Data.DataSet queryResultDataset) {
            return base.Channel.FieldUpdateByID(queryID, fieldName, queryResultDataset);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FieldUpdateByIDAsync(string queryID, string fieldName, System.Data.DataSet queryResultDataset) {
            return base.Channel.FieldUpdateByIDAsync(queryID, fieldName, queryResultDataset);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BAQExecute_WCF.DynamicQueryService.FieldValidateResponse BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract.FieldValidate(BAQExecute_WCF.DynamicQueryService.FieldValidateRequest request) {
            return base.Channel.FieldValidate(request);
        }
        
        public System.Data.DataSet FieldValidate(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string fieldName, System.Data.DataSet queryResultDataset, out bool isValid) {
            BAQExecute_WCF.DynamicQueryService.FieldValidateRequest inValue = new BAQExecute_WCF.DynamicQueryService.FieldValidateRequest();
            inValue.queryDS = queryDS;
            inValue.fieldName = fieldName;
            inValue.queryResultDataset = queryResultDataset;
            BAQExecute_WCF.DynamicQueryService.FieldValidateResponse retVal = ((BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract)(this)).FieldValidate(inValue);
            isValid = retVal.isValid;
            return retVal.FieldValidateResult;
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.FieldValidateResponse> FieldValidateAsync(BAQExecute_WCF.DynamicQueryService.FieldValidateRequest request) {
            return base.Channel.FieldValidateAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BAQExecute_WCF.DynamicQueryService.FieldValidateByIDResponse BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract.FieldValidateByID(BAQExecute_WCF.DynamicQueryService.FieldValidateByIDRequest request) {
            return base.Channel.FieldValidateByID(request);
        }
        
        public System.Data.DataSet FieldValidateByID(string queryID, string fieldName, System.Data.DataSet queryResultDataset, out bool isValid) {
            BAQExecute_WCF.DynamicQueryService.FieldValidateByIDRequest inValue = new BAQExecute_WCF.DynamicQueryService.FieldValidateByIDRequest();
            inValue.queryID = queryID;
            inValue.fieldName = fieldName;
            inValue.queryResultDataset = queryResultDataset;
            BAQExecute_WCF.DynamicQueryService.FieldValidateByIDResponse retVal = ((BAQExecute_WCF.DynamicQueryService.DynamicQuerySvcContract)(this)).FieldValidateByID(inValue);
            isValid = retVal.isValid;
            return retVal.FieldValidateByIDResult;
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.FieldValidateByIDResponse> FieldValidateByIDAsync(BAQExecute_WCF.DynamicQueryService.FieldValidateByIDRequest request) {
            return base.Channel.FieldValidateByIDAsync(request);
        }
        
        public System.Data.DataSet RunCustomAction(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string actionID, System.Data.DataSet queryResultDataset) {
            return base.Channel.RunCustomAction(queryDS, actionID, queryResultDataset);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> RunCustomActionAsync(BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset queryDS, string actionID, System.Data.DataSet queryResultDataset) {
            return base.Channel.RunCustomActionAsync(queryDS, actionID, queryResultDataset);
        }
        
        public System.Data.DataSet RunCustomActionByID(string queryID, string actionID, System.Data.DataSet queryResultDataset) {
            return base.Channel.RunCustomActionByID(queryID, actionID, queryResultDataset);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> RunCustomActionByIDAsync(string queryID, string actionID, System.Data.DataSet queryResultDataset) {
            return base.Channel.RunCustomActionByIDAsync(queryID, actionID, queryResultDataset);
        }
        
        public System.Data.DataSet GetDistinctValues(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, string[] distinctFields) {
            return base.Channel.GetDistinctValues(queryID, executionParams, distinctFields);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetDistinctValuesAsync(string queryID, BAQExecute_WCF.DynamicQueryService.QueryExecutionTableset executionParams, string[] distinctFields) {
            return base.Channel.GetDistinctValuesAsync(queryID, executionParams, distinctFields);
        }
        
        public BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset GetByID(string queryID) {
            return base.Channel.GetByID(queryID);
        }
        
        public System.Threading.Tasks.Task<BAQExecute_WCF.DynamicQueryService.DynamicQueryTableset> GetByIDAsync(string queryID) {
            return base.Channel.GetByIDAsync(queryID);
        }
    }
}
